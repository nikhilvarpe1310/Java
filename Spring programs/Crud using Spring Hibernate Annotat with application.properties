//Crud using Spring Hibernate Annotation with application.properties
//application.properties
#database properties
a=com.mysql.cj.jdbc.Driver
b=jdbc:mysql://localhost:3306/jap77
c=root
d=

# hibernate properties
e=org.hibernate.dialect.MySQL8Dialect
f=update
g=true
h=true

#model class information
i=com.model


//MyConfiguration.java
package com.config;

import java.util.Properties;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.PropertySource;
import org.springframework.core.env.Environment;
import org.springframework.jdbc.datasource.DriverManagerDataSource;
import org.springframework.orm.hibernate5.HibernateTransactionManager;
import org.springframework.orm.hibernate5.LocalSessionFactoryBean;
import org.springframework.transaction.annotation.EnableTransactionManagement;


@Configuration
@EnableTransactionManagement
@ComponentScan(basePackages = {"com.dao","com.service"})
@PropertySource (value = ("classpath:application.properties"))
public class MyConfiguration {
	@Autowired
	private Environment e;
	
	
	@Bean
	public LocalSessionFactoryBean l1()
	{
		LocalSessionFactoryBean l = new LocalSessionFactoryBean();
		l.setDataSource(d1());
		l.setHibernateProperties(p1());
		l.setPackagesToScan(e.getRequiredProperty("i"));
		return l;
	}
	
	private DriverManagerDataSource d1()
	{
		DriverManagerDataSource d = new DriverManagerDataSource();
		d.setDriverClassName(e.getRequiredProperty("a"));
		d.setUrl(e.getRequiredProperty("b"));
		d.setUsername(e.getRequiredProperty("c"));
		d.setPassword(e.getRequiredProperty("d"));
		return d;
	}
	
	private Properties p1()
	{
		Properties p = new Properties();
		p.setProperty("hibernate.dialect", e.getRequiredProperty("e"));
		p.setProperty("hibernate.hbm2ddl.auto", e.getRequiredProperty("f"));
		p.setProperty("hibernate.format_sql", e.getRequiredProperty("g"));
		p.setProperty("hibernate.show_sql", e.getRequiredProperty("h"));
		return p;
	}
	
	@Bean
	public HibernateTransactionManager h1()
	{
		HibernateTransactionManager h = new HibernateTransactionManager();
		h.setSessionFactory(l1().getObject());
		return h;
	}

}


//Employee.java
package com.model;


import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;

@Entity

public class Employee {
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private int id;
	private String name;
	private String company;
	private String Designation;
	@Column(columnDefinition = "double(10,2)")
	private double salary;
	@Override
	public String toString() {
		return "Employee [id=" + id + ", name=" + name + ", company=" + company + ", Designation=" + Designation
				+ ", salary=" + salary + "]";
	}
	public int getId() {
		return id;
	}
	public void setId(int id) {
		this.id = id;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getCompany() {
		return company;
	}
	public void setCompany(String company) {
		this.company = company;
	}
	public String getDesignation() {
		return Designation;
	}
	public void setDesignation(String designation) {
		Designation = designation;
	}
	public double getSalary() {
		return salary;
	}
	public void setSalary(double salary) {
		this.salary = salary;
	}
	

}


//EmployeeDao.java
package com.dao;

import java.util.List;

import com.model.Employee;

public interface EmployeeDao {
	
	int insertEmployee(Employee e);
	
	int deleteEmployeeById(int id);
	
	Employee findEmployeeById(int id);
	
	List<Employee> findAllEmployee();
	
	void updateEmployee(Employee e);

}


//EmployeeDaoImpl.java
package com.dao;

import java.util.List;

import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.model.Employee;

@Repository
public class EmployeeDaoImpl implements EmployeeDao {

	@Autowired
	private SessionFactory sf;
	
	@Override
	public int insertEmployee(Employee e) {
		return (int) sf.getCurrentSession().save(e);
	}

	@Override
	public int deleteEmployeeById(int id) {
		return sf.getCurrentSession().createQuery("delete from employee where id=:a")
		.setParameter("a", id)
		.executeUpdate();
	}

	@Override
	public Employee findEmployeeById(int id) {
		return sf.getCurrentSession().get(Employee.class,id);
	}

	@Override
	public List<Employee> findAllEmployee() {
		return sf.getCurrentSession().createCriteria(Employee.class).list();
	}

	@Override
	public void updateEmployee(Employee e) {
		// TODO Auto-generated method stub
		
	}

}


//EmployeeService.java
package com.service;

import org.springframework.stereotype.Service;

import com.dao.EmployeeDao;


public interface EmployeeService extends EmployeeDao{

}


//EmployeeServiceImpl.java
package com.service;

import java.util.List;

import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.dao.EmployeeDao;
import com.model.Employee;

@Service
@Transactional
public class EmployeeServiceImpl implements EmployeeService{

	@Autowired
	private EmployeeDao ed;
	
	@Override
	public int insertEmployee(Employee e) {
		return ed.insertEmployee(e);
	}

	@Override
	public int deleteEmployeeById(int id) {
		return ed.deleteEmployeeById(id);
	}

	@Override
	public Employee findEmployeeById(int id) {
		return ed.findEmployeeById(id);
	}

	@Override
	public List<Employee> findAllEmployee() {
		return ed.findAllEmployee();
	}

	@Override
	public void updateEmployee(Employee e) {
		ed.updateEmployee(e);
		
	}

}


//App.java
package com.demo;

import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;

import com.config.MyConfiguration;
import com.model.Employee;
import com.service.EmployeeService;

public class App 
{
    public static void main( String[] args )
    {
    	ApplicationContext context = new AnnotationConfigApplicationContext(MyConfiguration.class);
    	EmployeeService es = context.getBean(EmployeeService.class);
    	Employee e = new Employee();
    	e.setName("Nikita Varpe");
    	e.setCompany("mks");
    	e.setDesignation("ui developer");
    	e.setSalary(89000);
    	System.out.println(es.insertEmployee(e));

    }
}
